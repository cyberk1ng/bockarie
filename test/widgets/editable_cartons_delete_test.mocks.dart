// Mocks generated by Mockito 5.4.6 from annotations
// in bockaire/test/widgets/editable_cartons_delete_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i3;

import 'package:bockaire/database/database.dart' as _i4;
import 'package:bockaire/services/quote_calculator_service.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

/// A class which mocks [QuoteCalculatorService].
///
/// See the documentation for Mockito's code generation for more information.
class MockQuoteCalculatorService extends _i1.Mock
    implements _i2.QuoteCalculatorService {
  MockQuoteCalculatorService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Future<List<_i2.ShippingQuote>> calculateAllQuotes({
    required double? chargeableKg,
    required bool? isOversized,
    String? originCity,
    String? originPostal,
    String? originCountry,
    String? originState,
    String? destCity,
    String? destPostal,
    String? destCountry,
    String? destState,
    List<_i4.Carton>? cartons,
    bool? useShippoApi = true,
    bool? fallbackToLocalRates = false,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#calculateAllQuotes, [], {
              #chargeableKg: chargeableKg,
              #isOversized: isOversized,
              #originCity: originCity,
              #originPostal: originPostal,
              #originCountry: originCountry,
              #originState: originState,
              #destCity: destCity,
              #destPostal: destPostal,
              #destCountry: destCountry,
              #destState: destState,
              #cartons: cartons,
              #useShippoApi: useShippoApi,
              #fallbackToLocalRates: fallbackToLocalRates,
            }),
            returnValue: _i3.Future<List<_i2.ShippingQuote>>.value(
              <_i2.ShippingQuote>[],
            ),
          )
          as _i3.Future<List<_i2.ShippingQuote>>);
}
