// Mocks generated by Mockito 5.4.6 from annotations
// in bockaire/test/widgets/voice/voice_input_modal_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i3;

import 'package:bockaire/services/ai_provider_interfaces.dart' as _i9;
import 'package:bockaire/services/audio_recorder_service.dart' as _i2;
import 'package:bockaire/services/carton_voice_parser_service.dart' as _i8;
import 'package:bockaire/services/city_matcher_service.dart' as _i11;
import 'package:bockaire/services/gemini_audio_transcription_service.dart'
    as _i6;
import 'package:bockaire/services/location_voice_parser_service.dart' as _i10;
import 'package:bockaire/services/whisper_server_manager.dart' as _i5;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i7;
import 'package:record/record.dart' as _i4;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

/// A class which mocks [AudioRecorderService].
///
/// See the documentation for Mockito's code generation for more information.
class MockAudioRecorderService extends _i1.Mock
    implements _i2.AudioRecorderService {
  MockAudioRecorderService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Stream<_i4.Amplitude> get amplitudeStream =>
      (super.noSuchMethod(
            Invocation.getter(#amplitudeStream),
            returnValue: _i3.Stream<_i4.Amplitude>.empty(),
          )
          as _i3.Stream<_i4.Amplitude>);

  @override
  _i3.Future<bool> startRecording() =>
      (super.noSuchMethod(
            Invocation.method(#startRecording, []),
            returnValue: _i3.Future<bool>.value(false),
          )
          as _i3.Future<bool>);

  @override
  _i3.Future<String?> stopRecording() =>
      (super.noSuchMethod(
            Invocation.method(#stopRecording, []),
            returnValue: _i3.Future<String?>.value(),
          )
          as _i3.Future<String?>);

  @override
  _i3.Future<bool> isRecording() =>
      (super.noSuchMethod(
            Invocation.method(#isRecording, []),
            returnValue: _i3.Future<bool>.value(false),
          )
          as _i3.Future<bool>);

  @override
  void dispose() => super.noSuchMethod(
    Invocation.method(#dispose, []),
    returnValueForMissingStub: null,
  );
}

/// A class which mocks [WhisperServerManager].
///
/// See the documentation for Mockito's code generation for more information.
class MockWhisperServerManager extends _i1.Mock
    implements _i5.WhisperServerManager {
  MockWhisperServerManager() {
    _i1.throwOnMissingStub(this);
  }

  @override
  bool get isRunning =>
      (super.noSuchMethod(Invocation.getter(#isRunning), returnValue: false)
          as bool);

  @override
  _i3.Future<bool> startServer() =>
      (super.noSuchMethod(
            Invocation.method(#startServer, []),
            returnValue: _i3.Future<bool>.value(false),
          )
          as _i3.Future<bool>);

  @override
  _i3.Future<void> stopServer() =>
      (super.noSuchMethod(
            Invocation.method(#stopServer, []),
            returnValue: _i3.Future<void>.value(),
            returnValueForMissingStub: _i3.Future<void>.value(),
          )
          as _i3.Future<void>);

  @override
  _i3.Future<bool> checkHealth() =>
      (super.noSuchMethod(
            Invocation.method(#checkHealth, []),
            returnValue: _i3.Future<bool>.value(false),
          )
          as _i3.Future<bool>);

  @override
  _i3.Future<bool> waitForReady({
    Duration? timeout = const Duration(seconds: 30),
  }) =>
      (super.noSuchMethod(
            Invocation.method(#waitForReady, [], {#timeout: timeout}),
            returnValue: _i3.Future<bool>.value(false),
          )
          as _i3.Future<bool>);

  @override
  void dispose() => super.noSuchMethod(
    Invocation.method(#dispose, []),
    returnValueForMissingStub: null,
  );
}

/// A class which mocks [GeminiAudioTranscriptionService].
///
/// See the documentation for Mockito's code generation for more information.
class MockGeminiAudioTranscriptionService extends _i1.Mock
    implements _i6.GeminiAudioTranscriptionService {
  MockGeminiAudioTranscriptionService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  String get apiKey =>
      (super.noSuchMethod(
            Invocation.getter(#apiKey),
            returnValue: _i7.dummyValue<String>(
              this,
              Invocation.getter(#apiKey),
            ),
          )
          as String);

  @override
  _i3.Future<String> transcribe(String? audioFilePath) =>
      (super.noSuchMethod(
            Invocation.method(#transcribe, [audioFilePath]),
            returnValue: _i3.Future<String>.value(
              _i7.dummyValue<String>(
                this,
                Invocation.method(#transcribe, [audioFilePath]),
              ),
            ),
          )
          as _i3.Future<String>);

  @override
  void dispose() => super.noSuchMethod(
    Invocation.method(#dispose, []),
    returnValueForMissingStub: null,
  );
}

/// A class which mocks [CartonVoiceParserService].
///
/// See the documentation for Mockito's code generation for more information.
class MockCartonVoiceParserService extends _i1.Mock
    implements _i8.CartonVoiceParserService {
  MockCartonVoiceParserService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Future<_i9.CartonData?> parseCartonFromText({
    required String? transcribedText,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#parseCartonFromText, [], {
              #transcribedText: transcribedText,
            }),
            returnValue: _i3.Future<_i9.CartonData?>.value(),
          )
          as _i3.Future<_i9.CartonData?>);

  @override
  void dispose() => super.noSuchMethod(
    Invocation.method(#dispose, []),
    returnValueForMissingStub: null,
  );
}

/// A class which mocks [LocationVoiceParserService].
///
/// See the documentation for Mockito's code generation for more information.
class MockLocationVoiceParserService extends _i1.Mock
    implements _i10.LocationVoiceParserService {
  MockLocationVoiceParserService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Future<_i9.ShipmentLocationData?> parseLocationFromText({
    required String? transcribedText,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#parseLocationFromText, [], {
              #transcribedText: transcribedText,
            }),
            returnValue: _i3.Future<_i9.ShipmentLocationData?>.value(),
          )
          as _i3.Future<_i9.ShipmentLocationData?>);
}

/// A class which mocks [CityMatcherService].
///
/// See the documentation for Mockito's code generation for more information.
class MockCityMatcherService extends _i1.Mock
    implements _i11.CityMatcherService {
  MockCityMatcherService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Future<_i11.MatchedCity?> findCity(String? cityName) =>
      (super.noSuchMethod(
            Invocation.method(#findCity, [cityName]),
            returnValue: _i3.Future<_i11.MatchedCity?>.value(),
          )
          as _i3.Future<_i11.MatchedCity?>);

  @override
  void dispose() => super.noSuchMethod(
    Invocation.method(#dispose, []),
    returnValueForMissingStub: null,
  );
}
